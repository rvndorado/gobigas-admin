[{"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\index.js":"1","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\App.js":"2","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\index.js":"3","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageProducts\\productList.js":"4","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageStocks\\stockList.js":"5","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\layout\\layout.js":"6","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageUsers\\adminList.js":"7","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageExpense\\expenseList.js":"8","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageOrders\\orderList.js":"9","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\contexts\\AuthContext.js":"10","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\navigation\\navigation.js":"11","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\routing\\routing.js":"12","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\routing\\privateRoute.js":"13","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\navigation\\navigationItems.js":"14","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageOrders.js":"15","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\dashboard.js":"16","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\modal\\modal.js":"17","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\changePassword\\changePassword.js":"18","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\signIn.js":"19","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageExpense.js":"20","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\firebase\\firebase.js":"21","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageStocks.js":"22","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageProducts.js":"23","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageUsers.js":"24","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\dashboard\\dashboard.js":"25","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageOrders\\orderList\\orderList.js":"26","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\signIn\\loginForm\\loginForm.js":"27","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageExpense\\expenseList\\expenseLIst.js":"28","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageStocks\\stockList\\stockList.js":"29","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\customerList\\customerList.js":"30","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\adminList\\adminList.js":"31","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageProducts\\productList\\productList.js":"32","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageExpense\\expenseList\\modalBody.js":"33","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageStocks\\stockList\\modalBody.js":"34","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageOrders\\orderList\\modalBody.js":"35","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageOrders\\orderList\\itemListBody.js":"36","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\dashboard\\analytics\\analyticsCard.js":"37","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\customerList\\modalBody.js":"38","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\adminList\\modalBody.js":"39","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageProducts\\productList\\modalBody.js":"40","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageProducts\\productList\\imageList.js":"41","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageExpense\\index.js":"42","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageUsers\\index.js":"43","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageOrders\\index.js":"44","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageStocks\\index.js":"45","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageProducts\\index.js":"46","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\common\\fileUpload.js":"47"},{"size":588,"mtime":1613105760000,"results":"48","hashOfConfig":"49"},{"size":189,"mtime":1613105760000,"results":"50","hashOfConfig":"49"},{"size":524,"mtime":1613105760000,"results":"51","hashOfConfig":"49"},{"size":2310,"mtime":1622080848548,"results":"52","hashOfConfig":"49"},{"size":1912,"mtime":1622082880688,"results":"53","hashOfConfig":"49"},{"size":703,"mtime":1615176284825,"results":"54","hashOfConfig":"49"},{"size":768,"mtime":1613105760000,"results":"55","hashOfConfig":"49"},{"size":1571,"mtime":1613105760000,"results":"56","hashOfConfig":"49"},{"size":2200,"mtime":1613105760000,"results":"57","hashOfConfig":"49"},{"size":1378,"mtime":1615196358584,"results":"58","hashOfConfig":"49"},{"size":3422,"mtime":1616142627828,"results":"59","hashOfConfig":"49"},{"size":1139,"mtime":1613105760000,"results":"60","hashOfConfig":"49"},{"size":483,"mtime":1613105760000,"results":"61","hashOfConfig":"49"},{"size":2674,"mtime":1613105760000,"results":"62","hashOfConfig":"49"},{"size":247,"mtime":1613105760000,"results":"63","hashOfConfig":"49"},{"size":244,"mtime":1613105760000,"results":"64","hashOfConfig":"49"},{"size":1136,"mtime":1613105760000,"results":"65","hashOfConfig":"49"},{"size":2771,"mtime":1613105760000,"results":"66","hashOfConfig":"49"},{"size":227,"mtime":1613105760000,"results":"67","hashOfConfig":"49"},{"size":258,"mtime":1613105760000,"results":"68","hashOfConfig":"49"},{"size":642,"mtime":1613105760000,"results":"69","hashOfConfig":"49"},{"size":247,"mtime":1613105760000,"results":"70","hashOfConfig":"49"},{"size":261,"mtime":1613105760000,"results":"71","hashOfConfig":"49"},{"size":386,"mtime":1613105760000,"results":"72","hashOfConfig":"49"},{"size":3009,"mtime":1613105760000,"results":"73","hashOfConfig":"49"},{"size":4720,"mtime":1613105760000,"results":"74","hashOfConfig":"49"},{"size":3313,"mtime":1616145448713,"results":"75","hashOfConfig":"49"},{"size":3722,"mtime":1613105760000,"results":"76","hashOfConfig":"49"},{"size":4128,"mtime":1622082554302,"results":"77","hashOfConfig":"49"},{"size":1928,"mtime":1613105760000,"results":"78","hashOfConfig":"49"},{"size":2220,"mtime":1613105760000,"results":"79","hashOfConfig":"49"},{"size":4942,"mtime":1613105760000,"results":"80","hashOfConfig":"49"},{"size":6600,"mtime":1613105760000,"results":"81","hashOfConfig":"49"},{"size":5492,"mtime":1622118262492,"results":"82","hashOfConfig":"49"},{"size":8012,"mtime":1613105760000,"results":"83","hashOfConfig":"49"},{"size":7149,"mtime":1622110921919,"results":"84","hashOfConfig":"49"},{"size":923,"mtime":1613105760000,"results":"85","hashOfConfig":"49"},{"size":1014,"mtime":1613105760000,"results":"86","hashOfConfig":"49"},{"size":3331,"mtime":1613105760000,"results":"87","hashOfConfig":"49"},{"size":6251,"mtime":1622081538361,"results":"88","hashOfConfig":"49"},{"size":4334,"mtime":1613105760000,"results":"89","hashOfConfig":"49"},{"size":450,"mtime":1613105760000,"results":"90","hashOfConfig":"49"},{"size":134,"mtime":1613105760000,"results":"91","hashOfConfig":"49"},{"size":572,"mtime":1613105760000,"results":"92","hashOfConfig":"49"},{"size":582,"mtime":1613105760000,"results":"93","hashOfConfig":"49"},{"size":694,"mtime":1613105760000,"results":"94","hashOfConfig":"49"},{"size":578,"mtime":1613105760000,"results":"95","hashOfConfig":"49"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"bondxf",{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"98"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"146","usedDeprecatedRules":"98"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"98"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"98"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"98"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"98"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"98"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"98"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"173","messages":"174","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"98"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"186","messages":"187","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"98"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"98"},"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\index.js",[],["201","202"],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\App.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\index.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageProducts\\productList.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageStocks\\stockList.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\layout\\layout.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageUsers\\adminList.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageExpense\\expenseList.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\reducers\\manageOrders\\orderList.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\contexts\\AuthContext.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\navigation\\navigation.js",["203"],"import React, { Fragment, useState } from 'react';\r\nimport NavigationItems from './navigationItems';\r\nimport './navigation.scss';\r\n\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport MenuIcon from '@material-ui/icons/Menu';\r\nimport Drawer from '@material-ui/core/Drawer';\r\nimport AccountCircleIcon from '@material-ui/icons/AccountCircle';\r\nimport Menu from '@material-ui/core/Menu';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\n\r\nimport ChangePassword from '../changePassword/changePassword';\r\nimport Modal from '../modal/modal';\r\n\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\n\r\nconst Navigation = () => {\r\n    const { logout } = useAuth();\r\n    const history = useHistory();\r\n\r\n    const [isDrawerOpen, seIsDrawerOpen] = useState(false);\r\n    const [userMenu, setUserMenu] = useState(null);\r\n    const [isModalOpen, setIsModalOpen] = useState(false);\r\n    const [error, setError] = useState('');\r\n    \r\n\r\n    const handleOpenUserMenu= (event) => {\r\n        setUserMenu(event.currentTarget);\r\n    }\r\n\r\n    const handleCloseUserMenu = () => {\r\n        setUserMenu(null);\r\n    }\r\n\r\n    const handleLogout = async () => {\r\n        try {\r\n            handleCloseUserMenu();\r\n            await logout();\r\n            history.push('/signin');\r\n        }  catch { \r\n            setError('error');\r\n        }\r\n    }\r\n\r\n    return(<Fragment>\r\n       <Modal\r\n            isOpen={isModalOpen}\r\n            closeFn={() => setIsModalOpen(false)}\r\n            title=\"Change Password\"\r\n            modalBody={<ChangePassword />}\r\n         />\r\n        <div className=\"navigation\">\r\n            <AppBar position=\"static\">\r\n                <Toolbar>\r\n                    <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\" onClick={() => seIsDrawerOpen(true)}>\r\n                        <MenuIcon />\r\n                    </IconButton>\r\n                    <Drawer anchor=\"left\" open={isDrawerOpen} onClose={() => seIsDrawerOpen(false)}>\r\n                        <NavigationItems toggleFn={seIsDrawerOpen} />\r\n                    </Drawer>\r\n\r\n                    <Typography variant=\"h6\" className=\"navigation__title\">\r\n                        GoBigas Admin\r\n                    </Typography>\r\n                    \r\n                    <IconButton color=\"inherit\" onClick={handleOpenUserMenu}>\r\n                        <AccountCircleIcon />\r\n                    </IconButton>\r\n                    <Menu\r\n                        id=\"usermenu\"\r\n                        anchorEl={userMenu}\r\n                        keepMounted\r\n                        getContentAnchorEl={null}\r\n                        anchorOrigin={{ vertical: \"bottom\", horizontal: \"center\" }}\r\n                        transformOrigin={{ vertical: \"top\", horizontal: \"center\" }}\r\n                        open={Boolean(userMenu)}\r\n                        onClose={handleCloseUserMenu}\r\n                    >\r\n                        <MenuItem onClick={() => setIsModalOpen(true)}>Change Password</MenuItem>\r\n                        <MenuItem onClick={handleLogout}>Logout</MenuItem>\r\n                    </Menu>\r\n                </Toolbar>\r\n            </AppBar>\r\n        </div>\r\n\r\n    </Fragment>);\r\n}\r\n\r\nexport default Navigation;","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\routing\\routing.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\routing\\privateRoute.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\navigation\\navigationItems.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageOrders.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\dashboard.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\modal\\modal.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\presentationals\\changePassword\\changePassword.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\signIn.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageExpense.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\firebase\\firebase.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageStocks.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageProducts.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\pages\\manageUsers.js",["204"],"import React, { Fragment } from 'react';\r\nimport AdminList from '../containers/manageUsers/adminList/adminList';\r\nimport CustomerList from '../containers/manageUsers/customerList/customerList';\r\n\r\nconst ManageUsers = () => {\r\n    return(<Fragment>\r\n        <div className=\"manageusers\">\r\n            <AdminList />\r\n        </div>\r\n\r\n    </Fragment>);\r\n}\r\n\r\nexport default ManageUsers;\r\n","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\dashboard\\dashboard.js",["205","206"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport AnalyticsCard from './analytics/analyticsCard';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport AccountBalanceWalletIcon from '@material-ui/icons/AccountBalanceWallet';\r\nimport firebase from '../../firebase/firebase';\r\n\r\nconst DashboardContainer = () => {\r\n    const [remainingFunds, setRemainingFunds] = useState(0);\r\n    const [remainingStocks, setRemainingStocks] = useState(0);\r\n    const [totalDebit, setTotalDebit] = useState(0);\r\n    const [totalCredit, setTotalCredit] = useState(0);\r\n\r\n    const fetchDashboardItems =  async () => {\r\n        let remainingFunds = 36000;\r\n        let remainingStocks = 0;\r\n        let debit = 0;\r\n        let credit = 0;\r\n        \r\n        const expenseListRef = firebase.firestore().collection('expense_list');\r\n        const snapshot = await expenseListRef.get();\r\n        snapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            if (data.entry_type === 'Debit') {\r\n                remainingFunds = remainingFunds + parseInt(data.amount);\r\n                debit = debit + parseInt(data.amount);\r\n            } else {\r\n                remainingFunds = remainingFunds - parseInt(data.amount);\r\n                credit = credit + parseInt(data.amount);\r\n            }\r\n        });\r\n\r\n        const orderListRef = firebase.firestore().collection('order_list');\r\n        const orderSnapshot = await orderListRef.get();\r\n\r\n        orderSnapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            remainingFunds = remainingFunds + parseInt(data.total_amount);\r\n            debit = debit + parseInt(data.total_amount);\r\n        })\r\n        \r\n        const stockListRef = firebase.firestore().collection('stock_list');\r\n        const stockSnapshot = await stockListRef.get();\r\n\r\n        stockSnapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            remainingStocks = remainingStocks + parseInt(data.remaining);\r\n        })\r\n\r\n        setRemainingFunds(remainingFunds);\r\n        setTotalDebit(debit);\r\n        setTotalCredit(credit);\r\n        setRemainingStocks(remainingStocks);\r\n    }\r\n\r\n    const numberWithCommas = (x) => {\r\n        return x.toString().replace(/\\B(?=(\\d{3})+(?!\\d))/g, \",\");\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchDashboardItems();\r\n    }, [])\r\n\r\n    return(<Fragment>\r\n        <Grid container spacing={3}>\r\n            <Grid item lg={6}>\r\n                <AnalyticsCard \r\n                    title=\"Remaining Funds\" \r\n                    value={'P' + numberWithCommas(remainingFunds) }\r\n                    icon={<AccountBalanceWalletIcon />} \r\n                />\r\n            </Grid>\r\n            <Grid item lg={6}>\r\n                <AnalyticsCard \r\n                    title=\"Remaining Stocks\" \r\n                    value={remainingStocks}\r\n                    icon={<AccountBalanceWalletIcon />} \r\n                />\r\n            </Grid>\r\n        </Grid>\r\n    </Fragment>);\r\n}\r\n\r\nexport default DashboardContainer;","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageOrders\\orderList\\orderList.js",["207"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Grid, _ } from 'gridjs-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Modal from '../../../presentationals/modal/modal';\r\nimport ModalBody from './modalBody';\r\nimport ItemModalBody from './itemListBody';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport firebase from '../../../firebase/firebase';\r\nimport {  useSelector, useDispatch } from 'react-redux';\r\nimport { FETCH_ORDER_LIST, FETCH_PRODUCT_LIST } from '../../../actions/manageOrders/index';\r\nimport 'gridjs/dist/theme/mermaid.css';\r\nimport './orderList.scss';\r\n\r\nconst OrderList = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isOpenOrderItems, setIsOpenOrderItems] = useState(false);\r\n    const [action, setAction] = useState('add');\r\n    const [docID, setDocID] = useState('0');\r\n    const [openToast, setOpenToast] = useState(false);\r\n    const [toastMessage, setToastMessage] = useState('');\r\n    const orderList = useSelector(state => state.orderList.list);\r\n    const columns = useSelector(state => state.orderList.columns);\r\n    const dispatch = useDispatch();\r\n\r\n    const getOrderList = async () => {\r\n        const orderList = [];\r\n        const orderListRef = firebase.firestore().collection('order_list');\r\n        const query = orderListRef.orderBy('date', 'desc');\r\n        const snapshot = await query.get();\r\n        snapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            data.remaining = data.quantity - data.sold;\r\n            orderList.push(\r\n                Object.assign({ \r\n                        id: doc.id,\r\n                        action: _(<Button variant=\"contained\" onClick={() => openModal('edit', doc.id)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>),\r\n                        items: _(<Button variant=\"contained\" onClick={() => openOrderItems(doc.id)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                    }, \r\n                data)\r\n            );\r\n        });\r\n        dispatch(FETCH_ORDER_LIST(orderList));\r\n        \r\n    }\r\n\r\n    const getProductList = async () => {\r\n        const productList = [];\r\n        const productListRef = firebase.firestore().collection('product_list');\r\n        const snapshot = await productListRef.get();\r\n        snapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            productList.push(data);\r\n        });\r\n        dispatch(FETCH_PRODUCT_LIST(productList));\r\n    }\r\n\r\n    const openModal = (action, docID) => {\r\n        setAction(action);\r\n        setDocID(docID);\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const openOrderItems = (documentID) => {\r\n        setIsOpenOrderItems(true);\r\n        setDocID(documentID);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getOrderList();\r\n        getProductList();\r\n    }, []);\r\n\r\n    return(<Fragment>\r\n        <Snackbar open={openToast} autoHideDuration={3000} onClose={() => setOpenToast(false)}>\r\n            <Alert onClose={() => setOpenToast(false)} severity=\"success\">\r\n                {toastMessage}\r\n            </Alert>\r\n        </Snackbar>\r\n        <Modal\r\n            isOpen={isOpen}\r\n            closeFn={() => setIsOpen(false)}\r\n            title=\"Order Details\"\r\n            modalBody={<ModalBody\r\n                action={action}\r\n                docID = {docID}\r\n                closeFn={() => setIsOpen(false)}\r\n                openFn={openModal}\r\n                openOrderFn={openOrderItems}\r\n                openToastFn={setOpenToast}\r\n                toastFn={setToastMessage}\r\n             />}\r\n         />\r\n        <Modal\r\n            isOpen={isOpenOrderItems}\r\n            closeFn={() => setIsOpenOrderItems(false)}\r\n            title=\"Order Items\"\r\n            modalBody={<ItemModalBody\r\n                docID = {docID}    \r\n            />}\r\n         />\r\n        <div className=\"orderlist\">\r\n            <div className=\"orderlist__title\">\r\n                <Typography color=\"textPrimary\" variant=\"h5\">Order List</Typography>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={() => openModal('add', 0)}> Add Order</Button>\r\n            </div>\r\n            <div className=\"orderlist__table\">\r\n                <Grid \r\n                    data={orderList} \r\n                    columns={columns}\r\n                    search={true}\r\n                    pagination={{ enabled: true, limit: 10 }}\r\n                />\r\n            </div>\r\n        </div>\r\n    </Fragment>);\r\n}\r\n\r\nexport default OrderList;","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\signIn\\loginForm\\loginForm.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageExpense\\expenseList\\expenseLIst.js",["208"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Grid, _ } from 'gridjs-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Modal from '../../../presentationals/modal/modal';\r\nimport ModalBody from './modalBody';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport firebase from '../../../firebase/firebase';\r\nimport {  useSelector, useDispatch } from 'react-redux';\r\nimport { FETCH_EXPENSE_LIST } from '../../../actions/manageExpense/index';\r\n\r\n\r\nimport 'gridjs/dist/theme/mermaid.css';\r\nimport './expenseList.scss';\r\n\r\n\r\nconst ExpenseList = () => {\r\n\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [action, setAction] = useState('add');\r\n    const [docID, setDocID] = useState('0');\r\n    const [openToast, setOpenToast] = useState(false);\r\n    const [toastMessage, setToastMessage] = useState('');\r\n    const expenseList = useSelector(state => state.expenseList.list);\r\n    const columns = useSelector(state => state.expenseList.columns);\r\n    const dispatch = useDispatch();\r\n\r\n    const getExpenseList = async () => {\r\n        const expenseList = [];\r\n        const expenseListRef = firebase.firestore().collection('expense_list');\r\n        const query = expenseListRef.orderBy('date', 'desc');\r\n        const snapshot = await query.get();\r\n        snapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            data.image = _(<a href={data.image} target=\"_blank\" rel=\"noopener noreferrer\">Image URL</a>);\r\n            expenseList.push(\r\n                Object.assign({ \r\n                        id: doc.id,\r\n                        action: _(<Button variant=\"contained\" onClick={() => openModal('edit', doc.id)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                    }, \r\n                data)\r\n            );\r\n        });\r\n        dispatch(FETCH_EXPENSE_LIST(expenseList));\r\n    }\r\n\r\n    const openModal = (action, docID) => {\r\n        setAction(action);\r\n        setDocID(docID);\r\n        setIsOpen(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        getExpenseList();\r\n    }, []);\r\n    \r\n    \r\n    return(<Fragment>\r\n        <Snackbar open={openToast} autoHideDuration={3000} onClose={() => setOpenToast(false)}>\r\n            <Alert onClose={() => setOpenToast(false)} severity=\"success\">\r\n                {toastMessage}\r\n            </Alert>\r\n        </Snackbar>\r\n        <Modal\r\n            isOpen={isOpen}\r\n            closeFn={() => setIsOpen(false)}\r\n            title=\"Expense Details\"\r\n            modalBody={<ModalBody\r\n                    action={action}\r\n                    docID = {docID}\r\n                    closeFn={() => setIsOpen(false)}\r\n                    openFn={openModal}\r\n                    openToastFn={setOpenToast}\r\n                    toastFn={setToastMessage}\r\n                 />}\r\n         />\r\n        <div className=\"expenselist\">\r\n            <div className=\"expenselist__title\">\r\n                <Typography color=\"textPrimary\" variant=\"h5\">Expense List</Typography>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={() => openModal('add', '0')}> Add Expense</Button>\r\n            </div>\r\n            <div className=\"expenselist__table\">\r\n                <Grid \r\n                    data={expenseList} \r\n                    columns={columns}\r\n                    search={true}\r\n                    pagination={{ enabled: true, limit: 10 }}\r\n                />\r\n            </div>\r\n        </div>\r\n    </Fragment>);\r\n}\r\n\r\nexport default ExpenseList;","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageStocks\\stockList\\stockList.js",["209"],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\customerList\\customerList.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\adminList\\adminList.js",["210","211"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Grid, _ } from 'gridjs-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Modal from '../../../presentationals/modal/modal';\r\nimport ModalBody from './modalBody';\r\nimport firebase from '../../../firebase/firebase';\r\nimport {  useSelector, useDispatch } from 'react-redux';\r\nimport { FETCH_ADMIN_LIST } from '../../../actions/manageUsers/index';\r\n\r\nimport 'gridjs/dist/theme/mermaid.css';\r\nimport './adminList.scss';\r\n\r\nconst AdminList = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const adminList = useSelector(state => state.adminList.list);\r\n    const columns = useSelector(state => state.adminList.columns);\r\n    const dispatch = useDispatch();\r\n\r\n    const getAdminUserList = async () => {\r\n        const adminUserList = [];\r\n        const adminUserListRef = firebase.firestore().collection('admin_users');\r\n        const snapshot = await adminUserListRef.get();\r\n        snapshot.forEach(doc => {\r\n            adminUserList.push(Object.assign({ id: doc.id }, doc.data()));\r\n        });\r\n        dispatch(FETCH_ADMIN_LIST(adminUserList));\r\n    }\r\n\r\n    useEffect(() => {\r\n        getAdminUserList();\r\n    }, []);\r\n\r\n\r\n    return(<Fragment>\r\n        <Modal\r\n            isOpen={isOpen}\r\n            closeFn={() => setIsOpen(false)}\r\n            title=\"Admin User Details\"\r\n            modalBody={<ModalBody />}\r\n         />\r\n        <div className=\"adminlist\">\r\n            <div className=\"adminlist__title\">\r\n                <Typography color=\"textPrimary\" variant=\"h5\">Admin List</Typography>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={() => setIsOpen(true)}> Add Admin</Button>\r\n            </div>\r\n            <div className=\"adminlist__table\">\r\n                <Grid \r\n                    data={adminList} \r\n                    columns={columns}\r\n                    search={true}\r\n                    pagination={{ enabled: true, limit: 10 }}\r\n                />\r\n            </div>\r\n        </div>\r\n    </Fragment>);\r\n}\r\n\r\nexport default AdminList;\r\n\r\n","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageProducts\\productList\\productList.js",["212"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Grid, _ } from 'gridjs-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport Modal from '../../../presentationals/modal/modal';\r\nimport ModalBody from './modalBody';\r\nimport ImageList from './imageList';\r\nimport {  useSelector, useDispatch } from 'react-redux';\r\nimport firebase from '../../../firebase/firebase';\r\nimport { FETCH_PRODUCT_LIST } from '../../../actions/manageProducts/index';\r\nimport 'gridjs/dist/theme/mermaid.css';\r\nimport './productList.scss';\r\n\r\n\r\nconst ProductList = () => {\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [isImageListOpen, setIsImageListOpen] = useState(false);\r\n    const [action, setAction] = useState('add');\r\n    const [docID, setDocID] = useState('0');\r\n    const [openToast, setOpenToast] = useState(false);\r\n    const [toastMessage, setToastMessage] = useState('');\r\n    const productList = useSelector(state => state.productList.list);\r\n    const columns = useSelector(state => state.productList.columns);\r\n    const dispatch = useDispatch();\r\n\r\n    const fetchProductList = async ()  => {\r\n        const productList = [];\r\n        const productListRef = firebase.firestore().collection('product_list');\r\n        const query = productListRef.orderBy('date', 'desc');\r\n        const snapshot = await query.get();\r\n    \r\n        snapshot.forEach(doc => {\r\n            const data = doc.data();\r\n            productList.push(\r\n                Object.assign({ \r\n                        id: doc.id,\r\n                        action: _(\r\n                            <Fragment>\r\n                                <Button \r\n                                    variant=\"contained\" \r\n                                    onClick={() => openDetailsModal('edit', doc.id)} \r\n                                    color=\"primary\" \r\n                                    startIcon={<EditIcon />}\r\n                                    style={{ marginRight: '10px' }}\r\n                                > Details\r\n                                </Button>  \r\n                                <Button \r\n                                    variant=\"contained\" \r\n                                    onClick={() => openImageModal(doc.id)} \r\n                                    color=\"primary\" \r\n                                    startIcon={<EditIcon />}\r\n                                > Images\r\n                                </Button> \r\n                            </Fragment>                                \r\n                            )\r\n                    }, \r\n                data)\r\n            );\r\n        });\r\n        dispatch(FETCH_PRODUCT_LIST(productList));\r\n    }\r\n\r\n    const openDetailsModal = (action, docID) => {\r\n        setAction(action);\r\n        setDocID(docID);\r\n        setIsOpen(true);\r\n    }\r\n\r\n    const openImageModal = (docID) => {\r\n        setDocID(docID)\r\n        setIsImageListOpen(true);\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchProductList();\r\n    }, [])\r\n\r\n\r\n\r\n    return(<Fragment>\r\n        <Snackbar open={openToast} autoHideDuration={3000} onClose={() => setOpenToast(false)}>\r\n            <Alert onClose={() => setOpenToast(false)} severity=\"success\">\r\n                {toastMessage}\r\n            </Alert>\r\n        </Snackbar>\r\n        <Modal\r\n            isOpen={isOpen}\r\n            closeFn={() => setIsOpen(false)}\r\n            title=\"Product Details\"\r\n            modalBody={<ModalBody \r\n                action={action}\r\n                docID = {docID}\r\n                closeFn={() => setIsOpen(false)}\r\n                openFn={openDetailsModal}\r\n                openToastFn={setOpenToast}\r\n                toastFn={setToastMessage}\r\n                imageModal={openImageModal}\r\n    \r\n            />}\r\n         />\r\n        <Modal\r\n            isOpen={isImageListOpen}\r\n            closeFn={() => setIsImageListOpen(false)}\r\n            title=\"Product Images\"\r\n            modalBody={<ImageList docID = {docID} />}\r\n         />\r\n        <div className=\"productlist\">\r\n            <div className=\"productlist__title\">\r\n                <Typography color=\"textPrimary\" variant=\"h5\">Product List</Typography>\r\n                <Button variant=\"contained\" color=\"primary\" startIcon={<AddIcon />} onClick={() => openDetailsModal('add', 0)}> Add Product</Button>\r\n            </div>\r\n            <div className=\"productlist__table\">\r\n                <Grid \r\n                    data={productList} \r\n                    columns={columns}\r\n                    search={true}\r\n                    pagination={{ enabled: true, limit: 10 }}\r\n                />\r\n            </div>\r\n        </div>\r\n    </Fragment>);\r\n}\r\n\r\nexport default ProductList;","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageExpense\\expenseList\\modalBody.js",["213"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport firebase, { Timestamp } from '../../../firebase/firebase';\r\nimport { useAuth } from '../../../contexts/AuthContext';\r\nimport {  useSelector, useDispatch } from 'react-redux';\r\nimport { uploadFile } from '../../../common/fileUpload';\r\nimport { _ } from 'gridjs-react';\r\nimport moment from 'moment';\r\nimport { ADD_EXPENSE_LIST_ITEM, SET_SELECTED_EXPENSE } from '../../../actions/manageExpense/index';\r\n\r\n\r\n\r\n\r\n\r\n\r\nconst ModalBody = ({action, docID, closeFn, openFn, openToastFn, toastFn}) => {\r\n\r\n    const [entryType, setEntryType] = useState(\"\");\r\n    const [file, setFile] = useState(null);\r\n    const [amount, setAmount] = useState(0);\r\n    const [description, setDescription] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const { currentUser } = useAuth();\r\n    const dispatch = useDispatch();\r\n    const expenseList = useSelector(state => state.expenseList.list);\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setError('');\r\n            setLoading(true);\r\n            let url = '';\r\n\r\n            if(action === 'add' && file === null) {\r\n                setError('Please attach a file to continue');\r\n                setLoading(false);\r\n                return;\r\n            }\r\n            if (file !== null) {\r\n                url = await uploadFile(`expense/${file.name}`, file, 'expense');\r\n                setImageUrl(url);\r\n            }\r\n            const data = {\r\n                entry_type: entryType,\r\n                amount: amount,\r\n                description: description,\r\n                date: Timestamp.fromDate(new Date(date))\r\n            }\r\n            if(url !== '') data.image = url;\r\n            const expenseListRef = action === 'add' ? firebase.firestore().collection('expense_list') : firebase.firestore().collection('expense_list').doc(docID);\r\n            if(action === 'add') {\r\n                data.createdBy = currentUser.email\r\n                const response = await expenseListRef.add(data);\r\n                data.id = response.id;\r\n                data.action = _(<Button variant=\"contained\" onClick={() => openFn('edit', response.id)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                data.image = _(<a href={data.image} target=\"_blank\" rel=\"noopener noreferrer\">Image URL</a>);\r\n                dispatch(ADD_EXPENSE_LIST_ITEM(data));\r\n                toastFn('Expense item added successfully');\r\n                openToastFn(true);\r\n            } else { \r\n                data.lastUpdateBy = currentUser.email;\r\n                await expenseListRef.update(data);\r\n                data.id = docID;\r\n                data.action = _(<Button variant=\"contained\" onClick={() => openFn('edit', docID)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                data.image = url === '' ? imageUrl : _(<a href={data.image} target=\"_blank\" rel=\"noopener noreferrer\">Image URL</a>);;\r\n                dispatch(SET_SELECTED_EXPENSE(data));\r\n                toastFn('Expense item updated successfully');\r\n                openToastFn(true);\r\n            }\r\n            \r\n            closeFn();\r\n            \r\n        } catch(error) {\r\n            setError('A problem has occured');\r\n        }\r\n\r\n        setLoading(false);\r\n    }\r\n\r\n    const handleEntryChange = (event) => {\r\n        setEntryType(event.target.value);\r\n    }\r\n\r\n    const handleFileChange = (event) => {\r\n        if (event.target.files[0]) {\r\n            setFile(event.target.files[0]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(action === 'edit') {\r\n            const expenseItem = expenseList.filter(item => item.id.indexOf(docID) > -1);\r\n            setDate(moment(expenseItem[0].date.toDate()).format('YYYY-MM-DD'));\r\n            setEntryType(expenseItem[0].entry_type);\r\n            setAmount(expenseItem[0].amount);\r\n            setDescription(expenseItem[0].description);\r\n            setImageUrl(expenseItem[0].image);\r\n        }\r\n        \r\n    }, [])\r\n\r\n    return(<Fragment>\r\n        {error && <Alert severity=\"error\">{error}</Alert>}\r\n        <br />\r\n        <form autoComplete=\"off\" onSubmit={(e) => e.preventDefault(handleSubmit())}>\r\n            <FormControl fullWidth required>\r\n                <InputLabel id=\"entry-select-label\">Entry Type</InputLabel>\r\n                <Select\r\n                    labelId=\"entry-select-label\"\r\n                    id=\"entry-select\"\r\n                    value={entryType}\r\n                    onChange={handleEntryChange}\r\n                >\r\n                    <MenuItem value=\"Debit\">Debit</MenuItem>\r\n                    <MenuItem value=\"Credit\">Credit</MenuItem>\r\n                </Select>\r\n            </FormControl>\r\n            <TextField \r\n                required \r\n                id=\"amount\" \r\n                type=\"number\" \r\n                label=\"Amount\" \r\n                placeholder=\"Amount\" \r\n                fullWidth\r\n                value={amount} \r\n                onChange={(e) => setAmount(e.target.value)}\r\n            />\r\n            <TextField \r\n                required id=\"standard-required\" \r\n                type=\"date\" \r\n                label=\"Date\" \r\n                fullWidth \r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                value={date}\r\n                onChange={(e) => setDate(e.target.value)}\r\n            />\r\n            <TextField \r\n                required \r\n                id=\"description\" \r\n                label=\"Description\" \r\n                placeholder=\"Description\" \r\n                fullWidth \r\n                value={description}\r\n                onChange={(e) => setDescription(e.target.value)}\r\n            />\r\n            <br /><br />\r\n            <input type=\"file\" onChange={handleFileChange} />\r\n            <br />\r\n            <Button variant=\"contained\" disabled={loading} color=\"primary\" type=\"submit\" style={{ marginTop: '20px' }}>Submit</Button>\r\n        </form>\r\n    </Fragment>);\r\n}\r\n\r\nexport default ModalBody;","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageStocks\\stockList\\modalBody.js",["214"],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageOrders\\orderList\\modalBody.js",["215"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport FormControl from '@material-ui/core/FormControl';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from '@material-ui/core/InputLabel';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport firebase, { Timestamp } from '../../../firebase/firebase';\r\nimport { useAuth } from '../../../contexts/AuthContext';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { uploadFile } from '../../../common/fileUpload';\r\nimport { _ } from 'gridjs-react';\r\nimport moment from 'moment';\r\nimport { UPDATE_ORDER_ITEMS, ADD_ORDER_LIST_ITEM } from '../../../actions/manageOrders/index';\r\n\r\n\r\n\r\n\r\nconst ModalBody = ({action, docID, closeFn, openFn, openOrderFn, openToastFn, toastFn}) => {\r\n\r\n    const [orderStatus, setOrderStatus] = useState('');\r\n    const [fullName, setFullName] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [contact, setContact] = useState('');\r\n    const [address, setAddress] = useState('');\r\n    const [date, setDate] = useState('');\r\n    const [file, setFile] = useState(null);\r\n    const [imageUrl, setImageUrl] = useState('');\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [totalAmount, setTotalAmount] = useState(0);\r\n    const [orderItems, setOrderItems] = useState(null);\r\n    const { currentUser } = useAuth();\r\n    const dispatch = useDispatch();\r\n\r\n    const orderList = useSelector(state => state.orderList.list);\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setError('');\r\n            setLoading(true);\r\n            let url = '';\r\n\r\n            if(action === 'add' && file === null) {\r\n                setError('Please attach a file to continue');\r\n                setLoading(false);\r\n                return;\r\n            }\r\n\r\n            if (file !== null) {\r\n                url = await uploadFile(`order/${file.name}`, file, 'order');\r\n                setImageUrl(url);\r\n            }\r\n\r\n            const orderListRef = action === 'add' ? firebase.firestore().collection('order_list') : firebase.firestore().collection('order_list').doc(docID);\r\n            const data = {\r\n                name: fullName,\r\n                email: email,\r\n                contact_number: contact,\r\n                date: Timestamp.fromDate(new Date(date)),\r\n                delivery_address: address,\r\n                status: orderStatus,\r\n            }\r\n            if(url !== '') data.image = url;\r\n            if (action === 'add') {\r\n                data.order_items = [];\r\n                data.total_amount = 0;\r\n                data.createdBy = currentUser.email\r\n                const response = await orderListRef.add(data);\r\n                data.id = response.id;\r\n                data.action = _(<Button variant=\"contained\" onClick={() => openFn('edit', response.id)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                data.items = _(<Button variant=\"contained\" onClick={() => openOrderFn(response.id)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                dispatch(ADD_ORDER_LIST_ITEM(data));\r\n                toastFn('Order item added successfully');\r\n                openToastFn(true);\r\n            } else {    \r\n                data.lastUpdateBy = currentUser.email;\r\n                data.total_amount = totalAmount;\r\n                data.order_items = orderItems;\r\n                data.image = imageUrl\r\n                await orderListRef.update(data);\r\n                data.id = docID;\r\n                data.action = _(<Button variant=\"contained\" onClick={() => openFn('edit', docID)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                data.items = _(<Button variant=\"contained\" onClick={() => openOrderFn(docID)} color=\"primary\" startIcon={<EditIcon />}> Edit</Button>)\r\n                dispatch(UPDATE_ORDER_ITEMS(data));\r\n                toastFn('Order item updated successfully');\r\n                openToastFn(true);\r\n            }\r\n\r\n\r\n            closeFn();\r\n        } catch(error) {\r\n            setError('A problem has occured');\r\n        }\r\n        setLoading(false);\r\n    }\r\n\r\n    const handleOrderStatusChange = (event) => {\r\n        setOrderStatus(event.target.value);\r\n    }\r\n\r\n    const handleFileChange = (event) => {\r\n        if (event.target.files[0]) {\r\n            setFile(event.target.files[0]);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if(action === 'edit') {\r\n            const orderItem = orderList.filter(item => item.id.indexOf(docID) > -1);\r\n            setFullName(orderItem[0]['name']);\r\n            setEmail(orderItem[0]['email']);\r\n            setContact(orderItem[0]['contact_number']);\r\n            setAddress(orderItem[0]['delivery_address']);\r\n            setDate(moment(orderItem[0]['date'].toDate()).format('YYYY-MM-DD'));\r\n            setOrderStatus(orderItem[0]['status']);\r\n            setTotalAmount(orderItem[0]['total_amount']);\r\n            setOrderItems(orderItem[0]['order_items']);\r\n            setImageUrl(orderItem[0].image);\r\n        }\r\n    }, [])\r\n\r\n    return(<Fragment>\r\n       {error && <Alert severity=\"error\">{error}</Alert>}\r\n        <br />\r\n        <form autoComplete=\"off\" onSubmit={(e) => e.preventDefault(handleSubmit())}>\r\n            <TextField \r\n                required id=\"fullName\" \r\n                label=\"Full Name\" \r\n                placeholder=\"Full Name\" \r\n                fullWidth \r\n                value={fullName}\r\n                onChange={(e) => setFullName(e.target.value)}\r\n            />\r\n            <TextField \r\n                required id=\"email\" \r\n                label=\"Email\" \r\n                type=\"email\"\r\n                placeholder=\"Email\" \r\n                fullWidth \r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n            />\r\n            <TextField \r\n                required id=\"contact\" \r\n                label=\"Contact Number\"\r\n                type=\"tel\" \r\n                placeholder=\"Contact Number\" \r\n                fullWidth\r\n                value={contact}\r\n                onChange={(e) => setContact(e.target.value)}\r\n            />\r\n            <TextField \r\n                required id=\"delivery\" \r\n                label=\"Delivery Address\" \r\n                placeholder=\"Delivery Address\" \r\n                fullWidth \r\n                value={address}\r\n                onChange={(e) => setAddress(e.target.value)}\r\n            />\r\n            <br />\r\n            <TextField \r\n                required id=\"date\" \r\n                type=\"date\" \r\n                label=\"Date of Purchase\" \r\n                fullWidth \r\n                InputLabelProps={{\r\n                    shrink: true,\r\n                  }}\r\n                value={date}\r\n                onChange={(e) => setDate(e.target.value)}\r\n            />\r\n            <FormControl fullWidth required>\r\n                <InputLabel id=\"order-select-label\">Order Status</InputLabel>\r\n                <Select\r\n                    labelId=\"order-select-label\"\r\n                    id=\"order-select\"\r\n                    value={orderStatus}\r\n                    onChange={handleOrderStatusChange}\r\n                >\r\n                    <MenuItem value={'Paid'}>Paid</MenuItem>\r\n                    <MenuItem value={'For Delivery'}>For Delivery</MenuItem>\r\n                    <MenuItem value={'Delivered'}>Delivered</MenuItem>\r\n                </Select>\r\n            </FormControl> \r\n            <br /><br />\r\n            <input type=\"file\" onChange={handleFileChange} />\r\n            <br /> \r\n            <Button variant=\"contained\" disabled={loading} color=\"primary\" type=\"submit\" style={{ marginTop: '20px' }}>Submit</Button>\r\n        </form>\r\n    </Fragment>);\r\n}\r\n\r\nexport default ModalBody;","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageOrders\\orderList\\itemListBody.js",["216","217","218"],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\dashboard\\analytics\\analyticsCard.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\customerList\\modalBody.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageUsers\\adminList\\modalBody.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageProducts\\productList\\modalBody.js",["219"],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\containers\\manageProducts\\productList\\imageList.js",["220","221"],"import React, { Fragment, useState, useEffect } from 'react';\r\nimport { Grid, _ } from 'gridjs-react';\r\nimport Button from '@material-ui/core/Button';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport Snackbar from '@material-ui/core/Snackbar';\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport {  useSelector, useDispatch } from 'react-redux';\r\nimport firebase from '../../../firebase/firebase';\r\nimport { uploadFile } from '../../../common/fileUpload';\r\n\r\nconst ItemListBody = ({ docID }) => {\r\n    const columns = [\r\n        {  id: 'image', name: 'Image URL' },\r\n        {  id: 'action', name: 'Actions' }\r\n    ]\r\n    const [file, setFile] = useState(null);\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState('');\r\n    const [openToast, setOpenToast] = useState(false);\r\n    const [toastMessage, setToastMessage] = useState('');\r\n    const [images, setImages] = useState([]);\r\n    const dispatch = useDispatch();\r\n\r\n    const productList = useSelector(state => state.productList.list);\r\n\r\n    const loadImages = () => {\r\n        const productItem = productList.filter(item => item.id.indexOf(docID) > -1);\r\n        const productImages = [];\r\n        if (productItem[0].images !== []) {\r\n            productItem[0].images.map((item, index) => {\r\n                return productImages.push({\r\n                    image: _(<a href={item} target=\"_blank\" rel=\"noopener noreferrer\">Image URL</a>),\r\n                    action: _(<Button variant=\"contained\" color=\"secondary\" onClick={() => handleDeleteImage(index)} startIcon={<DeleteIcon />}> Delete</Button>)\r\n                })\r\n            })\r\n        }\r\n        setImages(productImages);\r\n    }\r\n\r\n    const handleSubmit = async () => {\r\n        try {\r\n            setLoading(true);\r\n            setError('');\r\n            const imageList = productList.filter(item => item.id.indexOf(docID) > -1);\r\n            const imageURL = await uploadFile(`products/${file.name}`, file, 'products');\r\n            imageList[0]['images'].push(imageURL);\r\n            const data = {\r\n                images: imageList[0]['images']\r\n            }\r\n            const productListRef = firebase.firestore().collection('product_list').doc(docID);\r\n            await productListRef.update(data);\r\n            setFile(null);\r\n            setToastMessage('Image added successfully');\r\n            setOpenToast(true);\r\n            loadImages();\r\n        } catch(error) {\r\n            setError('A problem has occured');\r\n        }\r\n\r\n        setLoading(false);\r\n\r\n    }\r\n\r\n    const handleFileChange = (event) => {\r\n        if (event.target.files[0]) {\r\n            setFile(event.target.files[0]);\r\n        }\r\n    }\r\n\r\n    const handleDeleteImage = async (index,) => {\r\n        try {\r\n            const imageList = productList.filter(item => item.id.indexOf(docID) > -1);\r\n            imageList[0]['images'].splice(index, 1);\r\n            const data = {\r\n                images: imageList[0]['images']\r\n            }\r\n            const productListRef = firebase.firestore().collection('product_list').doc(docID);\r\n            await productListRef.update(data);\r\n            setToastMessage('Image deleted successfully');\r\n            setOpenToast(true);\r\n            loadImages();\r\n        } catch(error) {\r\n            setError('A problem has occured');\r\n        }\r\n\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadImages();\r\n    }, [])\r\n\r\n\r\n    return(<Fragment>\r\n        <Snackbar open={openToast} autoHideDuration={3000} onClose={() => setOpenToast(false)}>\r\n            <Alert onClose={() => setOpenToast(false)} severity=\"success\">\r\n                {toastMessage}\r\n            </Alert>\r\n        </Snackbar>\r\n        {error && <Alert severity=\"error\">{error}</Alert>}\r\n        <Grid \r\n            data={images} \r\n            columns={columns}\r\n            search={false}\r\n            pagination={{ enabled: true, limit: 5 }}\r\n        />\r\n        <form autoComplete=\"off\" onSubmit={(e) => e.preventDefault(handleSubmit())}>\r\n             <br /><br />\r\n            <input required type=\"file\" onChange={handleFileChange} />\r\n            <br />\r\n            <Button variant=\"contained\" disabled={loading} color=\"primary\" type=\"submit\" style={{ marginTop: '20px' }}>Add Item</Button>\r\n        </form>\r\n    </Fragment>);\r\n}\r\n\r\nexport default ItemListBody","N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageExpense\\index.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageUsers\\index.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageOrders\\index.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageStocks\\index.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\actions\\manageProducts\\index.js",[],"N:\\NICHOLE\\Documents\\GO BIGAS\\gobigas solutions\\admin\\gobigas-admin\\src\\common\\fileUpload.js",[],{"ruleId":"222","replacedBy":"223"},{"ruleId":"224","replacedBy":"225"},{"ruleId":"226","severity":1,"message":"227","line":30,"column":12,"nodeType":"228","messageId":"229","endLine":30,"endColumn":17},{"ruleId":"226","severity":1,"message":"230","line":3,"column":8,"nodeType":"228","messageId":"229","endLine":3,"endColumn":20},{"ruleId":"226","severity":1,"message":"231","line":10,"column":12,"nodeType":"228","messageId":"229","endLine":10,"endColumn":22},{"ruleId":"226","severity":1,"message":"232","line":11,"column":12,"nodeType":"228","messageId":"229","endLine":11,"endColumn":23},{"ruleId":"233","severity":1,"message":"234","line":75,"column":8,"nodeType":"235","endLine":75,"endColumn":10,"suggestions":"236"},{"ruleId":"233","severity":1,"message":"237","line":58,"column":8,"nodeType":"235","endLine":58,"endColumn":10,"suggestions":"238"},{"ruleId":"233","severity":1,"message":"239","line":71,"column":8,"nodeType":"235","endLine":71,"endColumn":10,"suggestions":"240"},{"ruleId":"226","severity":1,"message":"241","line":2,"column":16,"nodeType":"228","messageId":"229","endLine":2,"endColumn":17},{"ruleId":"233","severity":1,"message":"242","line":33,"column":8,"nodeType":"235","endLine":33,"endColumn":10,"suggestions":"243"},{"ruleId":"233","severity":1,"message":"244","line":80,"column":8,"nodeType":"235","endLine":80,"endColumn":10,"suggestions":"245"},{"ruleId":"233","severity":1,"message":"246","line":109,"column":8,"nodeType":"235","endLine":109,"endColumn":10,"suggestions":"247"},{"ruleId":"233","severity":1,"message":"248","line":89,"column":8,"nodeType":"235","endLine":89,"endColumn":10,"suggestions":"249"},{"ruleId":"233","severity":1,"message":"250","line":123,"column":8,"nodeType":"235","endLine":123,"endColumn":10,"suggestions":"251"},{"ruleId":"226","severity":1,"message":"241","line":2,"column":16,"nodeType":"228","messageId":"229","endLine":2,"endColumn":17},{"ruleId":"226","severity":1,"message":"252","line":12,"column":23,"nodeType":"228","messageId":"229","endLine":12,"endColumn":34},{"ruleId":"233","severity":1,"message":"253","line":139,"column":8,"nodeType":"235","endLine":139,"endColumn":10,"suggestions":"254"},{"ruleId":"233","severity":1,"message":"255","line":101,"column":8,"nodeType":"235","endLine":101,"endColumn":10,"suggestions":"256"},{"ruleId":"226","severity":1,"message":"257","line":22,"column":11,"nodeType":"228","messageId":"229","endLine":22,"endColumn":19},{"ruleId":"233","severity":1,"message":"258","line":90,"column":8,"nodeType":"235","endLine":90,"endColumn":10,"suggestions":"259"},"no-native-reassign",["260"],"no-negated-in-lhs",["261"],"no-unused-vars","'error' is assigned a value but never used.","Identifier","unusedVar","'CustomerList' is defined but never used.","'totalDebit' is assigned a value but never used.","'totalCredit' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'getOrderList' and 'getProductList'. Either include them or remove the dependency array.","ArrayExpression",["262"],"React Hook useEffect has a missing dependency: 'getExpenseList'. Either include it or remove the dependency array.",["263"],"React Hook useEffect has missing dependencies: 'getProductList' and 'getStockList'. Either include them or remove the dependency array.",["264"],"'_' is defined but never used.","React Hook useEffect has a missing dependency: 'getAdminUserList'. Either include it or remove the dependency array.",["265"],"React Hook useEffect has a missing dependency: 'fetchProductList'. Either include it or remove the dependency array.",["266"],"React Hook useEffect has missing dependencies: 'action', 'docID', and 'expenseList'. Either include them or remove the dependency array.",["267"],"React Hook useEffect has missing dependencies: 'action', 'docID', 'productList', and 'stockList'. Either include them or remove the dependency array.",["268"],"React Hook useEffect has missing dependencies: 'action', 'docID', and 'orderList'. Either include them or remove the dependency array.",["269"],"'useDispatch' is defined but never used.","React Hook useEffect has a missing dependency: 'fetchOrderItems'. Either include it or remove the dependency array.",["270"],"React Hook useEffect has missing dependencies: 'action', 'docID', and 'productList'. Either include them or remove the dependency array.",["271"],"'dispatch' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'loadImages'. Either include it or remove the dependency array.",["272"],"no-global-assign","no-unsafe-negation",{"desc":"273","fix":"274"},{"desc":"275","fix":"276"},{"desc":"277","fix":"278"},{"desc":"279","fix":"280"},{"desc":"281","fix":"282"},{"desc":"283","fix":"284"},{"desc":"285","fix":"286"},{"desc":"287","fix":"288"},{"desc":"289","fix":"290"},{"desc":"291","fix":"292"},{"desc":"293","fix":"294"},"Update the dependencies array to be: [getOrderList, getProductList]",{"range":"295","text":"296"},"Update the dependencies array to be: [getExpenseList]",{"range":"297","text":"298"},"Update the dependencies array to be: [getProductList, getStockList]",{"range":"299","text":"300"},"Update the dependencies array to be: [getAdminUserList]",{"range":"301","text":"302"},"Update the dependencies array to be: [fetchProductList]",{"range":"303","text":"304"},"Update the dependencies array to be: [action, docID, expenseList]",{"range":"305","text":"306"},"Update the dependencies array to be: [action, docID, productList, stockList]",{"range":"307","text":"308"},"Update the dependencies array to be: [action, docID, orderList]",{"range":"309","text":"310"},"Update the dependencies array to be: [fetchOrderItems]",{"range":"311","text":"312"},"Update the dependencies array to be: [action, docID, productList]",{"range":"313","text":"314"},"Update the dependencies array to be: [loadImages]",{"range":"315","text":"316"},[3029,3031],"[getOrderList, getProductList]",[2271,2273],"[getExpenseList]",[2731,2733],"[getProductList, getStockList]",[1319,1321],"[getAdminUserList]",[3250,3252],"[fetchProductList]",[4570,4572],"[action, docID, expenseList]",[4070,4072],"[action, docID, productList, stockList]",[5306,5308],"[action, docID, orderList]",[5263,5265],"[fetchOrderItems]",[4131,4133],"[action, docID, productList]",[3414,3416],"[loadImages]"]